# -*- coding: utf-8 -*-
"""MM_WS5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9GpW4zDaInlf8Za6Ze7GHcOjRe0Xohd
"""

import math
import numpy as np
import statistics
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from collections import defaultdict
from scipy.stats import f

"""# Functions Required"""

def linear_reg(x, y, n):
  
  xy = np.dot(np.array(x), np.array(y))

  sum_x = sum(x)
  sum_y = sum(y)
  sq_sum_x = sum_x**2
  sum_x_sq = 0
  for i in x:
    sum_x_sq += i**2

  a = (((n*xy) - (sum_x*sum_y)) /((n*sum_x_sq) - sq_sum_x))
  b = ((sum_y - (a*sum_x))/n)

  return a, b

def compute_seasonal_index(years, values):
  
  four_quarter_moving_avg = []
  four_quarter_centered_moving_avg = []
  percent_actual_moving_avg = []

  for i in range(len(values)-3):
    four_quarter_moving_avg.append((values[i] + values[i+1] + values[i+2] + values[i+3]) / 4)

  for i in range(len(four_quarter_moving_avg)-1):
    four_quarter_centered_moving_avg.append((four_quarter_moving_avg[i] + four_quarter_moving_avg[i+1]) / 2)

  j = 0
  for i in range(2, len(values)-2):
    percent_actual_moving_avg.append((values[i] / four_quarter_centered_moving_avg[j]) * 100)
    j += 1

  diff = [0, 0] + percent_actual_moving_avg
  n = len(diff) % 4
  diff += [0 for i in range(n)]

  quarter = []
  modified_mean = []
  n_years = len(years)
  w = len(diff) // n_years

  for i in range(4):
    temp = []
    for j in range(0, n_years):
      temp.append(diff[w*j+i])
    quarter.append(temp)

  for i in range(len(quarter)):
    quarter[i] = [i for i in quarter[i] if i != 0]
    quarter[i].remove(min(quarter[i]))
    quarter[i].remove(max(quarter[i]))
    modified_mean.append(sum(quarter[i]) / len(quarter[i]))

  total_indices = sum(modified_mean)
  adjusting_factor = 400 / total_indices

  seasonal_indices = []
  for i in range(len(modified_mean)):
    seasonal_indices.append(modified_mean[i] * adjusting_factor)

  modified_seasonal_indices = [i/100 for i in seasonal_indices]
  modified_seasonal_indices = modified_seasonal_indices * n_years

  deseasonalized_occupancy = []
  for i in range(len(values)):
    deseasonalized_occupancy.append((values[i] / modified_seasonal_indices[i]))

  final_dict = {'4-Quarter Moving Average':four_quarter_moving_avg, '4-Quarter Centered Moving Average':four_quarter_centered_moving_avg, 'Percentage of Actual to Moving Average Values':percent_actual_moving_avg, 'Diff':diff, 'Quarter':quarter, 'Modified Mean':modified_mean, 'Seasonal Indices':seasonal_indices, 'Deseasonalized Occupancy':deseasonalized_occupancy}

  return final_dict

def identify_trend(years, deseasonalised_values):

  n_values = len(deseasonalised_values)
  n_years = len(years)

  time = [0 for i in range(n_values)]

  mid = (n_values//2) - 1
  time[mid] = -0.5
  time[mid+1] = 0.5

  for i in range(mid-1, -1, -1):
    time[i] = time[i+1] - 1

  for i in range(mid+2, n_values):
    time[i] = time[i-1] + 1

  for i in range(n_values):
    time[i] *= 2

  xy = [i*j for i,j in zip(time, deseasonalised_values)]
  x_sq = [i**2 for i in time]

  sum_y = sum(deseasonalised_values)
  sum_x_sq = sum(x_sq)
  sum_xy = sum(xy)

  print("\nSummation y: ", sum_y)
  print("\nSummation xy: ", sum_xy)
  print("\nSummation x2: ", sum_x_sq)

  b = sum_xy / sum_x_sq
  a = sum_y / (n_years * 4)

  final_dict = {'a':a, 'b':b, 'time':time}
  
  return final_dict

"""# Question 1"""

year = [1989, 1990, 1991, 1992, 1993, 1994, 1995]
boxes = [i*10000 for i in [21.0, 19.4, 22.6, 28.2, 30.4, 24.0, 25.0]]
n_x = len(year)

a, b = linear_reg(year, boxes, n_x)
print("Linear Equation: y = ", a, "x + ", b)
y_cap = [((a*i)+b) for i in year]
print(y_cap)

percent = []
relative = []

for i in range(len(boxes)):
  percent.append((boxes[i]/y_cap[i])*100)
  relative.append(((boxes[i]-y_cap[i])/y_cap[i])*100)

print("Percent Cyclic Variation = ", percent)
print("Relative Cyclic Variation = ", relative)

max_percent = max(percent)
max_relative = max(relative)

year_max_percent = year[percent.index(max_percent)]
year_max_relative = year[relative.index(max_relative)]
print(year_max_percent)
print(year_max_relative)

if year_max_percent == year_max_relative:
  print("Yes, the biggest fluctuation from the trend occur under each measure of cyclic variation in same year")

"""# Question 2"""

years = [1991, 1992, 1993, 1994, 1995]
values = [102, 120, 90, 78, 110, 126, 95, 83, 111, 128, 97, 86, 115, 135, 103, 91, 122, 144, 110, 98]

dict_q1 = compute_seasonal_index(years, values)
print(dict_q1)

"""# Question 3"""

years = [1992, 1993, 1994, 1995]
actual_sales = [5.6, 6.8, 6.3, 5.2, 5.7, 6.7, 6.4, 5.4, 5.3, 6.6, 6.1, 5.1, 5.4, 6.9, 6.2, 5.3]

dict_q3 = compute_seasonal_index(years, actual_sales)

plt.plot(actual_sales, color="r", label="Actual")
plt.plot(dict_q3['4-Quarter Centered Moving Average'], color="g", label="4-Quarter Centered Moving Avg")
plt.legend()
plt.xlabel("Index")
plt.ylabel("Sales")
plt.show()

"""# Question 4"""

years = [1992, 1993, 1994, 1995]
actual_sales = [293, 246, 231, 282, 301, 252, 227, 291, 304, 259, 239, 296, 306, 265, 240, 300]

dict_q4 = compute_seasonal_index(years, actual_sales)
print(dict_q4)

trend_q4 = identify_trend(years, dict_q4['Deseasonalized Occupancy'])
print(trend_q4)

y_cap = []
for i in trend_q4['time']:
  y_cap.append((trend_q4['a'] + trend_q4['b']*i))
print(y_cap)

percent_of_trend = []
for i in range(len(y_cap)):
  percent_of_trend.append((dict_q4['Deseasonalized Occupancy'][i] / y_cap[i]) * 100)
print(percent_of_trend)

plt.plot(actual_sales, color="r", label="Actual Sales")
plt.plot(dict_q4['Deseasonalized Occupancy'], '--', color="g", label="Deseasonalized Occupancy")
plt.plot(y_cap, color="b", label="Y cap")
plt.legend()
plt.xlabel("Index")
plt.ylabel("Sales")
plt.show()