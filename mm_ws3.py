# -*- coding: utf-8 -*-
"""MM_WS3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11AKqktYSaSVChwbGO-0eOf0lGOJ4SgUP
"""

import math
import numpy as np
import statistics
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from collections import defaultdict
from scipy.stats import f

"""# Functions Required"""

def eval_metrics(x, y, y_cap, n):

  sse = 0
  for i in range(n):
    err_diff = y[i] - y_cap[i]
    sse += (err_diff)**2

  xy_levels = defaultdict(list)
  for i in range(len(x)):
    xy_levels[x[i]].append(y[i])

  sspe = 0 
  sslof = 0
  for i in xy_levels:
    ni = len(xy_levels[i])
    avg_y_i = sum(xy_levels[i])/ni
    temp_sspe = 0 
    for j in range(ni):
      temp_sspe += (xy_levels[i][j] - avg_y_i)**2
    sspe += temp_sspe
    sslof += ni*(avg_y_i - y_cap[x.index(i)])**2

  m = len(xy_levels)
  n = len(x)
  p = 2
  F0 = (sslof / (m-p)) / (sspe / (n-m))
  F_critical = f.ppf(q=1-.05, dfn=m-p, dfd=n-m)

  return sse, sspe, sslof, F0, F_critical

def linear_reg(x, y, n):
  
  xy = np.dot(np.array(x), np.array(y))

  sum_x = sum(x)
  sum_y = sum(y)
  sq_sum_x = sum_x**2
  sum_x_sq = 0
  for i in x:
    sum_x_sq += i**2

  a = (((n*xy) - (sum_x*sum_y)) /((n*sum_x_sq) - sq_sum_x))
  b = ((sum_y - (a*sum_x))/n)

  return a, b

def check_model(F0, F_critical):
  if F_critical >= F0:
    print("The linear model is adequate!")
  else:
    print("The linear model is inadequate of representing the data because most of the error results from the lack of fit, rather than pure error in the data. A better model can be constructed (potentially a higher order polynomial) to reduce the error from lack of fit.")

"""# Question 1"""

x = [200, 250, 200, 250, 189.65, 260.35, 225, 225, 225, 225, 225, 225]
y = [43, 78, 69, 73, 48, 78, 65, 74, 76, 79, 83, 81]

n_x = len(x)
a, b = linear_reg(x, y, n_x)
print("Linear Regression Model: y = ", a, "x + ", b)
y_cap = [((a*i)+b) for i in x]
print(y_cap)

plt.scatter(x, y, color="r", label="Actual")
plt.plot(x, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("Temperature (Celsius)")
plt.ylabel("Conversion (%)")
plt.show()

n_y = len(y)
sse, sspe, sslof, F0, F_critical = eval_metrics(x, y, y_cap, n_y)
print(sse)
print(sspe)
print(sslof)
print(F0)
print(F_critical)

check_model(F0, F_critical)

"""# Question 2"""

x1 = [195, 255, 195, 255, 255, 255, 255, 195, 255, 255, 255, 255, 255, 340]
x2 = [4.00, 4.00, 4.60, 4.60, 4.20, 4.10, 4.60, 4.30, 4.30, 4.00, 4.70, 4.30, 4.72, 4.30]

y = [1004, 1636, 852, 1506, 1272, 1270, 1269, 903, 1555, 1260, 1146, 1276, 1225, 1321]

n_x1 = len(x1)
a, b = linear_reg(x1, y, n_x1)
print("Linear Regression Model: y = ", a, "x + ", b)
y_cap = [((a*i)+b) for i in x1]
print(y_cap)

sse, sspe, sslof, F0, F_critical = eval_metrics(x, y, y_cap, n_y)
print(sse)
print(sspe)
print(sslof)
print(F0)
print(F_critical)

plt.scatter(x1, y, color="r", label="Actual")
plt.plot(x1, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("drive-in time, min")
plt.ylabel("gain, or hFE")
plt.show()

check_model(F0, F_critical)

n_x2 = len(x2)
a, b = linear_reg(x2, y, n_x2)
print("Linear Regression Model: y = ", a, "x + ", b)
y_cap = [((a*i)+b) for i in x2]
print(y_cap)

sse, sspe, sslof, F0, F_critical = eval_metrics(x, y, y_cap, n_y)
print(sse)
print(sspe)
print(sslof)
print(F0)
print(F_critical)

plt.scatter(x2, y, color="r", label="Actual")
plt.plot(x2, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("dose, ions*10^14")
plt.ylabel("gain, or hFE")
plt.show()

check_model(F0, F_critical)

"""# Functions Required"""

def eval_metrics(y, y_cap, n):

  sse = 0
  sst = 0
  y_bar = sum(y)/n
  for i in range(n):
    err_diff = y[i] - y_cap[i]
    sse += (err_diff)**2
    sst += (y[i] - y_bar)**2

  correlation = 1-(sse/sst)
  return sse, sst, correlation

"""# Question 3"""

year = [i for i in range(1978, 2000)]
no = [0.73, 2.55, 2.90, 3.83, 2.53, 2.77, 3.93, 2.03, 4.39, 3.04, 3.41, 5.07, 3.95, 3.14, 3.44, 3.63, 4.50, 3.95, 5.24, 3.30, 4.36, 3.33]

n_x = len(year)
a, b = linear_reg(year, no, n_x)
print("Linear Regression Model: y = ", a, "x + ", b)
y_cap = [((a*i)+b) for i in year]
print(y_cap)

plt.scatter(year, no, color="r", label="Actual")
plt.plot(year, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("Year")
plt.ylabel("Nitrogen Oxide")
plt.show()

sse, sst, correlation = eval_metrics(no, y_cap, n_y)
print(sse)
print(sst)
print(correlation)

"""# Question 4"""

V = [2.27, 2.76, 3.27, 3.31, 3.70, 3.85, 4.31, 4.39, 4.42, 4.81, 4.90, 5.05, 5.21, 5.62, 5.88]
P = [2500, 365, 23700, 5491, 14000, 78200, 70700, 138000, 304500, 341948, 49375, 260200, 867023, 1340000, 1092759]

plt.scatter(V, P, color="r")
plt.xlabel("V")
plt.ylabel("P")
plt.show()

# (a) P = aV^b => ln P = ln a + b ln V
n_x = len(V)
ln_V = np.log(V)
ln_P = np.log(P)
b, ln_a = linear_reg(ln_V, ln_P, n_x)
print("Linear Regression Model: ln P = ", b, "ln V + ", ln_a)
y_cap = [((b*i)+ln_a) for i in ln_V]
print(y_cap)

plt.scatter(ln_V, ln_P, color="r", label="Actual")
plt.plot(ln_V, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("ln_V")
plt.ylabel("ln_P")
plt.show()

n_y = len(P)
sse, sst, correlation = eval_metrics(ln_P, y_cap, n_y)
print(sse)
print(sst)
print(correlation)

# (b) P = a ln V
n_y = len(P)
a, b = linear_reg(ln_V, P, n_x)
print("Linear Regression Model: P = ", a, "ln V + ", b)
y_cap = [(a*i+b) for i in ln_V]
print(y_cap)

plt.scatter(ln_V, P, color="r", label="Actual")
plt.plot(ln_V, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("ln_V")
plt.ylabel("P")
plt.show()

sse, sst, correlation = eval_metrics(P, y_cap, n_y)
print(sse)
print(sst)
print(correlation)

"""# Question 5"""

r = [57.9,108.2,149.6,227.9,778.1,1428.2,2837.9,4488.9]
T = [88,225,365,687,4329,10753,30660,60150]

plt.scatter(r, T, color="r")
plt.xlabel("Mean distance from the sun (millions of kilometers)")
plt.ylabel("Period (Days)")
plt.show()

# T = Cr^a => ln T = ln C + a ln r
n_x = len(r)
ln_r = np.log(r)
ln_T = np.log(T)
a, ln_C = linear_reg(ln_r, ln_T, n_x)
print("Linear Regression Model: ln T = ", a, "ln r + ", ln_C)
y_cap = [((a*i)+ln_C) for i in ln_r]
print(y_cap)

plt.scatter(ln_r, ln_T, color="r", label="Actual")
plt.plot(ln_r, y_cap, color="g", label="Predicted")
plt.legend()
plt.xlabel("ln_r")
plt.ylabel("ln_T")
plt.show()

n_y = len(T)
sse, sst, correlation = eval_metrics(ln_T, y_cap, n_y)
print(sse)
print(sst)
print(correlation)