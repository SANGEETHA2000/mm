# -*- coding: utf-8 -*-
"""MM_WS1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FGW-0f7e2VCWvjD9FlgfFjH4-31PtE0g
"""

import matplotlib.pyplot as plt
import random
import pprint
import math
import scipy.stats as stats
from statistics import mean

"""# Question 1"""

def funRecur(r, n, a0):
  return (r**n)*a0

# r = 0

n = 20
r = 0
a0 = 0
x = []
result = []
for i in range(n):
  x.append(i)
  result.append(funRecur(r, i, a0))
print(result)

plt.plot(x, result)

# 0 < r < 1

n = 20
a0 = 50
r = [0.1, 0.3, 0.5, 0.7, 0.9]
result = []

x = []
for i in range(n):
  x.append(i)

for j in r:
  temp = []
  for i in range(n):
    temp.append(funRecur(j, i, a0))
  result.append(temp)

print(result)
for i in result:
  plt.plot(x, i)

# -1 < r < 0

n = 20
a0 = 50
r = [-0.1, -0.3, -0.5, -0.7, -0.9]
result = []

x = []
for i in range(n):
  x.append(i)

for j in r:
  temp = []
  for i in range(n):
    temp.append(funRecur(j, i, a0))
  result.append(temp)

print(result)
for i in result:
  plt.plot(x, i)

# |r| > 1

n = 20
a0 = 50
r = random.sample(range(-100, 100), 10)
result = []

x = []
for i in range(n):
  x.append(i)

for j in r:
  if abs(j) > 1:
    temp = []
    for i in range(n):
      temp.append(funRecur(abs(j), i, a0))
    result.append(temp)

print(result)
for i in result:
  plt.plot(x, i)

"""# Question 2"""

def funRecur(n, a0):
  a = [a0]
  for i in range(n):
    a.append(0.5*a[-1] + a0)
  return a

a0_1 = 0.1
a1 = funRecur(20, a0_1)
print(a1)
plt.plot(a1)

a0_2 = 0.2
a2 = funRecur(20, a0_2)
print(a2)
plt.plot(a2)

a0_3 = 0.3
a3 = funRecur(20, a0_3)
print(a3)
plt.plot(a3)

"""# Functions - Questions 3 & 4"""

def forward_diff_tab(arr):

  forward_diff_table=[]

  while len(arr)>1:
    temp = []
    
    for i in range(1,len(arr)):
      temp.append(arr[i]-arr[i-1])
    forward_diff_table.append(temp)
    arr = temp

  return forward_diff_table

def ncr(n, r):
  val = 1

  for i in range(r):
    val *= (n - i)

  if r == 1:
    return val

  a = val / math.factorial(r)
  
  return a

def forward_interpolation(y_0, n, fdt, u):
  val = y_0

  for i in range(n):
    val += ncr(u, i+1) * fdt[i][0]

  return val

"""# Question 3"""

n = [i for i in range(1, 17)]
an = [3, 6, 11, 21, 32, 47, 65, 87, 112, 110, 171, 204, 241, 282, 325, 376]

forward_diff_table = forward_diff_tab(an)

for i in forward_diff_table:
  print(i,"\n")

# for i in range(1, len(forward_diff_table)):
#   plt.plot(forward_diff_table[i])

plt.plot(forward_diff_table[0])

h=1

error = []
for i in range(len(an)):
  u = (n[i]-n[0])/h
  y_cap = forward_interpolation(an[0], len(forward_diff_table), forward_diff_table, u)
  error.append(y_cap - an[i])

print(error)
plt.plot(n,error)

"""# Question 4"""

force = [10, 20, 30, 40, 50, 60, 70, 80, 90]
stretch = [19, 57, 94, 134, 173, 216, 256, 297, 343]

forward_diff_table = forward_diff_tab(stretch)

for i in forward_diff_table:
  print(i,"\n")

# for i in range(1, len(forward_diff_table)):
#   plt.plot(forward_diff_table[i])

plt.plot(forward_diff_table[0])

h=10

y_cap = []
force_x = [15, 17, 85]
for i in range(len(force_x)):
  u = (force_x[i]-force[0])/h
  y_cap.append(forward_interpolation(stretch[0], len(forward_diff_table), forward_diff_table, u))

print(y_cap)
plt.plot(force_x, y_cap)

error = []

for i in range(len(force)):
  u = (force[i]-force[0])/h
  y_cap = forward_interpolation(stretch[0], len(forward_diff_table), forward_diff_table, u)
  error.append(y_cap - stretch[i])

print(error)
plt.plot(force, error)